C:\Users\Christine\PycharmProjects\sexism_detection_bert\venv\Scripts\python.exe C:/Users/Christine/PycharmProjects/sexism_detection_bert/main.py C:\Users\Christine\Downloads\sexism_data.csv text sexist False
----- Start -----
False
Number of sexist examples: 1809 
 Perc.: 13.271220013205193
Number. of no_sexist examples: 11822 
 Perc.: 86.7287799867948
----- Normalization -----
----- Split data into training, validation and test set -----
No. of training examples: 9542
No. of validation examples: 2862
No. of testing examples: 1227
----- Use distilbert tokenizer to encode data -----
2022-08-30 13:40:24.897090: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX AVX2
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2022-08-30 13:40:25.310909: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1532] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 6615 MB memory:  -> device: 0, name: NVIDIA GeForce GTX 1070 Ti, pci bus id: 0000:01:00.0, compute capability: 6.1
----- Initialize base model -----
----- Add classification head -----
Some layers from the model checkpoint at distilbert-base-uncased were not used when initializing TFDistilBertModel: ['vocab_transform', 'vocab_layer_norm', 'vocab_projector', 'activation_13']
- This IS expected if you are initializing TFDistilBertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing TFDistilBertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
All the layers of TFDistilBertModel were initialized from the model checkpoint at distilbert-base-uncased.
If your task is similar to the task the model of the checkpoint was trained on, you can already use TFDistilBertModel for predictions without further training.
Model: "model"
__________________________________________________________________________________________________
 Layer (type)                   Output Shape         Param #     Connected to                     
==================================================================================================
 input_ids (InputLayer)         [(None, 512)]        0           []                               
                                                                                                  
 input_attention (InputLayer)   [(None, 512)]        0           []                               
                                                                                                  
 tf_distil_bert_model (TFDistil  TFBaseModelOutput(l  66362880   ['input_ids[0][0]',              
 BertModel)                     ast_hidden_state=(N               'input_attention[0][0]']        
                                one, 512, 768),                                                   
                                 hidden_states=((No                                               
                                ne, 512, 768),                                                    
                                 (None, 512, 768),                                                
                                 (None, 512, 768),                                                
                                 (None, 512, 768),                                                
                                 (None, 512, 768),                                                
                                 (None, 512, 768),                                                
                                 (None, 512, 768)),                                               
                                 attentions=None)                                                 
                                                                                                  
 tf.__operators__.getitem (Slic  (None, 768)         0           ['tf_distil_bert_model[0][7]']   
 ingOpLambda)                                                                                     
                                                                                                  
 dense (Dense)                  (None, 1)            769         ['tf.__operators__.getitem[0][0]'
                                                                 ]                                
                                                                                                  
==================================================================================================
Total params: 66,363,649
Trainable params: 769
Non-trainable params: 66,362,880

DISTILBERT_DROPOUT = 0.2
DISTILBERT_ATT_DROPOUT = 0.2
layer.trainable = False
__________________________________________________________________________________________________
----- Save model -----
WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.regularization.dropout.Dropout object at 0x000002897FA983A0>, because it is not built.
WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.regularization.dropout.Dropout object at 0x000002897FB0DB50>, because it is not built.
WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.regularization.dropout.Dropout object at 0x000002897FB1E2B0>, because it is not built.
WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.regularization.dropout.Dropout object at 0x000002897FB329D0>, because it is not built.
WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.regularization.dropout.Dropout object at 0x000002897FB28130>, because it is not built.
WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.regularization.dropout.Dropout object at 0x000002897FB25850>, because it is not built.
WARNING:absl:Found untraced functions such as embeddings_layer_call_fn, embeddings_layer_call_and_return_conditional_losses, transformer_layer_call_fn, transformer_layer_call_and_return_conditional_losses, LayerNorm_layer_call_fn while saving (showing 5 of 164). These functions will not be directly callable after loading.
----- Start training -----
Epoch 1/6
149/149 - 238s - loss: 0.2662 - accuracy: 0.2615 - val_loss: 0.1631 - val_accuracy: 0.3222 - 238s/epoch - 2s/step
Epoch 2/6
149/149 - 235s - loss: 0.1107 - accuracy: 0.6124 - val_loss: 0.0755 - val_accuracy: 0.7977 - 235s/epoch - 2s/step
Epoch 3/6
149/149 - 235s - loss: 0.0674 - accuracy: 0.7950 - val_loss: 0.0511 - val_accuracy: 0.8564 - 235s/epoch - 2s/step
Epoch 4/6
149/149 - 235s - loss: 0.0534 - accuracy: 0.8405 - val_loss: 0.0432 - val_accuracy: 0.8571 - 235s/epoch - 2s/step
Epoch 5/6
149/149 - 235s - loss: 0.0484 - accuracy: 0.8528 - val_loss: 0.0401 - val_accuracy: 0.8679 - 235s/epoch - 2s/step
Epoch 6/6
149/149 - 235s - loss: 0.0457 - accuracy: 0.8597 - val_loss: 0.0387 - val_accuracy: 0.8679 - 235s/epoch - 2s/step
Minimum Validation Loss: 0.0387
----- Finish training. Start evalution -----
39/39 [==============================] - 21s 525ms/step
Accuracy:   0.8671556642216789
ROC-AUC:    0.5451992711840952

Process finished with exit code 0